#!/usr/bin/env pwsh

Write-Host "üöÄ COMPLETE PRODUCTION DEPLOYMENT SCRIPT" -ForegroundColor Cyan
Write-Host "=========================================" -ForegroundColor Cyan

# Configuration
$SERVER_IP = "91.99.194.255"
$SSH_KEY = "C:\Users\auy1j\.ssh\hetzner-pizza-key"
$REMOTE_PATH = "/opt/pizza-app"

# Step 1: Test SSH Connection
Write-Host "üì° Testing SSH connection..." -ForegroundColor Yellow
try {
    $sshTest = ssh -i $SSH_KEY -o ConnectTimeout=10 root@$SERVER_IP "echo 'SSH OK'"
    if ($sshTest -eq "SSH OK") {
        Write-Host "‚úÖ SSH Connection successful" -ForegroundColor Green
    } else {
        throw "SSH connection failed"
    }
} catch {
    Write-Host "‚ùå SSH Connection failed: $($_.Exception.Message)" -ForegroundColor Red
    Write-Host "üîÑ Trying to reconnect..." -ForegroundColor Yellow
    
    # Try multiple times
    for ($i = 1; $i -le 3; $i++) {
        Write-Host "Attempt $i of 3..." -ForegroundColor Yellow
        try {
            $result = ssh -i $SSH_KEY -o ConnectTimeout=15 root@$SERVER_IP "echo 'Connected'"
            if ($result -eq "Connected") {
                Write-Host "‚úÖ SSH Connected on attempt $i" -ForegroundColor Green
                break
            }
        } catch {
            Write-Host "‚ùå Attempt $i failed" -ForegroundColor Red
            Start-Sleep -Seconds 5
        }
    }
}

# Step 2: Clean up local environment
Write-Host "üßπ Cleaning local environment..." -ForegroundColor Yellow
Remove-Item -Path ".next" -Recurse -Force -ErrorAction SilentlyContinue
Remove-Item -Path "node_modules\.cache" -Recurse -Force -ErrorAction SilentlyContinue

# Step 3: Copy all files to production
Write-Host "üìÅ Copying files to production..." -ForegroundColor Yellow
$filesToCopy = @(
    "Dockerfile",
    "docker-compose.yml", 
    ".env.production",
    "package.json",
    "package-lock.json",
    "next.config.ts",
    "tailwind.config.ts",
    "tsconfig.json",
    "src",
    "prisma",
    "public"
)

foreach ($file in $filesToCopy) {
    if (Test-Path $file) {
        Write-Host "Copying $file..." -ForegroundColor Gray
        scp -i $SSH_KEY -r $file root@${SERVER_IP}:${REMOTE_PATH}/
    } else {
        Write-Host "‚ö†Ô∏è File not found: $file" -ForegroundColor Yellow
    }
}

# Step 4: Setup production environment
Write-Host "‚öôÔ∏è Setting up production environment..." -ForegroundColor Yellow

# Create the deployment commands
$commands = @"
cd $REMOTE_PATH
echo "üì¶ Current directory contents:"
ls -la

echo "üê≥ Stopping existing containers..."
docker-compose down --remove-orphans

echo "üîß Fixing docker-compose.yml..."
sed -i 's/Dockerfile.optimized/Dockerfile/g' docker-compose.yml

echo "üèóÔ∏è Building application..."
docker-compose build --no-cache app

echo "üöÄ Starting application..."
docker-compose up -d

echo "‚è∞ Waiting for app to start..."
sleep 30

echo "üîç Checking container status..."
docker-compose ps

echo "üìä Checking logs..."
docker-compose logs app --tail=20

echo "üåê Testing API endpoint..."
curl -s http://localhost:3000/api/specialty-pizzas | head -100
"@

# Execute commands on production server
Write-Host "üéØ Executing deployment commands..." -ForegroundColor Yellow
ssh -i $SSH_KEY root@$SERVER_IP $commands

# Step 5: Test production deployment
Write-Host "üß™ Testing production deployment..." -ForegroundColor Yellow
Start-Sleep -Seconds 10

try {
    $response = Invoke-RestMethod -Uri "http://${SERVER_IP}:3000/api/specialty-pizzas" -Method GET -TimeoutSec 30
    if ($response.data) {
        Write-Host "‚úÖ PRODUCTION IS LIVE! Found $($response.data.Count) specialty pizzas" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è Production responding but no data" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ùå Production test failed: $($_.Exception.Message)" -ForegroundColor Red
    
    # Get more debugging info
    Write-Host "üîç Getting debug information..." -ForegroundColor Yellow
    ssh -i $SSH_KEY root@$SERVER_IP "cd $REMOTE_PATH && docker-compose logs app --tail=50"
}

# Step 6: Final status report
Write-Host "`nüìã DEPLOYMENT SUMMARY" -ForegroundColor Cyan
Write-Host "=====================" -ForegroundColor Cyan
Write-Host "Local Dev Server: http://localhost:3000" -ForegroundColor Green
Write-Host "Production Server: http://${SERVER_IP}:3000" -ForegroundColor Green

try {
    $localTest = Invoke-RestMethod -Uri "http://localhost:3000/api/settings" -Method GET
    Write-Host "‚úÖ Local: $($localTest.settings.app_name)" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Local server not responding" -ForegroundColor Red
}

try {
    $prodTest = Invoke-RestMethod -Uri "http://${SERVER_IP}:3000/api/settings" -Method GET
    Write-Host "‚úÖ Production: $($prodTest.settings.app_name)" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Production server not responding" -ForegroundColor Red
}

Write-Host "`nüéâ DEPLOYMENT COMPLETE!" -ForegroundColor Cyan
