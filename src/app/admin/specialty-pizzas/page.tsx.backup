'use client';

import { useState, useEffect } from 'react';
import AdminLayout from '@/components/AdminLayout';
import Link from 'next/link';

interface PizzaSize {
  id: string;
  name: string;
  diameter: string;
}

interface PizzaCrust {
  id: string;
  name: string;
  description: string;
  priceModifier: number;
}

interface PizzaSauce {
  id: string;
  name: string;
  description: string;
  color: string;
  spiceLevel: number;
  priceModifier: number;
}

interface PizzaTopping {
  id: string;
  name: string;
  category: string;
  price: number;
  isActive: boolean;
}

interface SpecialtyPizzaTopping {
  toppingId: string;
  section: 'WHOLE' | 'LEFT' | 'RIGHT';
  intensity: 'LIGHT' | 'REGULAR' | 'EXTRA';
}

interface SpecialtyPizza {
  id: string;
  name: string;
  description: string;
  imageUrl?: string;
  isActive: boolean;
  basePrice: number;
  sizeId: string;
  crustId: string;
  sauceId: string;
  sauceIntensity: 'LIGHT' | 'REGULAR' | 'EXTRA';
  crustCookingLevel: 'LIGHT' | 'REGULAR' | 'WELL_DONE';
  toppings: SpecialtyPizzaTopping[];
  createdAt: string;
  updatedAt: string;
}

export default function SpecialtyPizzasAdmin() {
  const [specialtyPizzas, setSpecialtyPizzas] = useState<SpecialtyPizza[]>([]);
  const [sizes, setSizes] = useState<PizzaSize[]>([]);
  const [crusts, setCrusts] = useState<PizzaCrust[]>([]);
  const [sauces, setSauces] = useState<PizzaSauce[]>([]);
  const [toppings, setToppings] = useState<PizzaTopping[]>([]);
  const [loading, setLoading] = useState(true);
  const [showForm, setShowForm] = useState(false);
  const [editingPizza, setEditingPizza] = useState<SpecialtyPizza | null>(null);
  
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    imageUrl: '',
    isActive: true,
    basePrice: 0,
    sizeId: '',
    crustId: '',
    sauceId: '',
    sauceIntensity: 'REGULAR' as 'LIGHT' | 'REGULAR' | 'EXTRA',
    crustCookingLevel: 'REGULAR' as 'LIGHT' | 'REGULAR' | 'WELL_DONE',
    toppings: [] as SpecialtyPizzaTopping[]
  });

  // Fetch all data
  const fetchData = async () => {
    try {
      // Fetch sizes
      const sizesResponse = await fetch('/api/admin/sizes');
      if (sizesResponse.status === 401) {
        window.location.href = '/admin/login';
        return;
      }
      const sizesData = await sizesResponse.json();
      setSizes(Array.isArray(sizesData) ? sizesData : []);

      // Fetch crusts
      const crustsResponse = await fetch('/api/admin/crusts');
      const crustsData = await crustsResponse.json();
      setCrusts(Array.isArray(crustsData) ? crustsData : []);

      // Fetch sauces
      const saucesResponse = await fetch('/api/admin/sauces');
      const saucesData = await saucesResponse.json();
      setSauces(Array.isArray(saucesData) ? saucesData : []);

      // Fetch toppings
      const toppingsResponse = await fetch('/api/admin/toppings');
      const toppingsData = await toppingsResponse.json();
      setToppings(Array.isArray(toppingsData) ? toppingsData : []);
      
      // TODO: Fetch specialty pizzas when API is ready
      setSpecialtyPizzas([]);
    } catch (error) {
      console.error('Error fetching data:', error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const url = editingPizza ? `/api/admin/specialty-pizzas/${editingPizza.id}` : '/api/admin/specialty-pizzas';
      const method = editingPizza ? 'PUT' : 'POST';
      
      const response = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      });

      if (response.ok) {
        // await fetchSpecialtyPizzas(); // TODO: Implement when API ready
        setShowForm(false);
        setEditingPizza(null);
        resetForm();
      }
    } catch (error) {
      console.error('Error saving specialty pizza:', error);
    }
  };

  const resetForm = () => {
    setFormData({
      name: '',
      description: '',
      imageUrl: '',
      isActive: true,
      basePrice: 0,
      sizeId: '',
      crustId: '',
      sauceId: '',
      sauceIntensity: 'REGULAR',
      crustCookingLevel: 'REGULAR',
      toppings: []
    });
  };

  // Add topping to specialty pizza
  const addTopping = (toppingId: string, section: 'WHOLE' | 'LEFT' | 'RIGHT') => {
    // Remove existing topping with same ID (make mutually exclusive)
    const filteredToppings = formData.toppings.filter(t => t.toppingId !== toppingId);
    
    setFormData(prev => ({
      ...prev,
      toppings: [...filteredToppings, {
        toppingId,
        section,
        intensity: 'REGULAR'
      }]
    }));
  };

  // Remove topping from specialty pizza
  const removeTopping = (toppingId: string) => {
    setFormData(prev => ({
      ...prev,
      toppings: prev.toppings.filter(t => t.toppingId !== toppingId)
    }));
  };

  // Update topping intensity
  const updateToppingIntensity = (toppingId: string, intensity: 'LIGHT' | 'REGULAR' | 'EXTRA') => {
    setFormData(prev => ({
      ...prev,
      toppings: prev.toppings.map(t => 
        t.toppingId === toppingId ? { ...t, intensity } : t
      )
    }));
  };

  // Calculate total price
  const calculateTotalPrice = () => {
    const selectedCrust = crusts.find(c => c.id === formData.crustId);
    const selectedSauce = sauces.find(s => s.id === formData.sauceId);
    
    let total = formData.basePrice; // Base price set by admin for this specialty pizza
    if (selectedCrust) total += selectedCrust.priceModifier;
    if (selectedSauce) total += selectedSauce.priceModifier;
    
    formData.toppings.forEach(selectedTopping => {
      const topping = toppings.find(t => t.id === selectedTopping.toppingId);
      if (topping) total += topping.price;
    });
    
    return total;
  };

  // Group toppings by category
  const groupedToppings = toppings.reduce((acc, topping) => {
    if (!acc[topping.category]) {
      acc[topping.category] = [];
    }
    acc[topping.category].push(topping);
    return acc;
  }, {} as Record<string, PizzaTopping[]>);

  return (
    <AdminLayout>
      <div className="px-4 sm:px-6 lg:px-8">
        <div className="sm:flex sm:items-center">
          <div className="sm:flex-auto">
            <h1 className="text-2xl font-semibold text-gray-900">Specialty Pizzas</h1>
            <p className="mt-2 text-sm text-gray-700">
              Create and manage pre-configured specialty pizza combinations.
            </p>
          </div>
          <div className="mt-4 sm:ml-16 sm:mt-0 sm:flex-none">
            <button
              type="button"
              onClick={() => {
                setShowForm(true);
                setEditingPizza(null);
                resetForm();
              }}
              className="block rounded-md bg-indigo-600 px-3 py-2 text-center text-sm font-semibold text-white shadow-sm hover:bg-indigo-500"
            >
              Create Specialty Pizza
            </button>
          </div>
        </div>

        <div className="mt-8">
          {/* Form Modal */}
          {showForm && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 overflow-y-auto">
            <div className="bg-white rounded-lg p-6 w-full max-w-4xl max-h-[90vh] overflow-y-auto">
              <h2 className="text-xl font-bold mb-4">
                {editingPizza ? 'Edit Specialty Pizza' : 'Create New Specialty Pizza'}
              </h2>
              
              <form onSubmit={handleSubmit} className="space-y-6">
                {/* Basic Information */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Pizza Name
                    </label>
                    <input
                      type="text"
                      value={formData.name}
                      onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
                      className="w-full border border-gray-300 rounded px-3 py-2"
                      placeholder="e.g., Meat Lover's, Veggie Supreme"
                      required
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Base Price ($)
                    </label>
                    <input
                      type="number"
                      step="0.01"
                      value={formData.basePrice}
                      onChange={(e) => setFormData(prev => ({ ...prev, basePrice: parseFloat(e.target.value) || 0 }))}
                      className="w-full border border-gray-300 rounded px-3 py-2"
                      placeholder="0.00"
                      required
                    />
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Description
                  </label>
                  <textarea
                    value={formData.description}
                    onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full border border-gray-300 rounded px-3 py-2"
                    rows={3}
                    placeholder="Describe this specialty pizza"
                    required
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Image URL (Optional)
                  </label>
                  <input
                    type="url"
                    value={formData.imageUrl}
                    onChange={(e) => setFormData(prev => ({ ...prev, imageUrl: e.target.value }))}
                    className="w-full border border-gray-300 rounded px-3 py-2"
                    placeholder="https://example.com/pizza-image.jpg"
                  />
                </div>

                {/* Pizza Configuration */}
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Size
                    </label>
                    <select
                      value={formData.sizeId}
                      onChange={(e) => setFormData(prev => ({ ...prev, sizeId: e.target.value }))}
                      className="w-full border border-gray-300 rounded px-3 py-2"
                      required
                    >
                      <option value="">Select Size</option>
                      {sizes.map(size => (
                        <option key={size.id} value={size.id}>
                          {size.name} ({size.diameter})
                        </option>
                      ))}
                    </select>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Crust
                    </label>
                    <select
                      value={formData.crustId}
                      onChange={(e) => setFormData(prev => ({ ...prev, crustId: e.target.value }))}
                      className="w-full border border-gray-300 rounded px-3 py-2"
                      required
                    >
                      <option value="">Select Crust</option>
                      {crusts.map(crust => (
                        <option key={crust.id} value={crust.id}>
                          {crust.name} ({crust.priceModifier >= 0 ? '+' : ''}${crust.priceModifier.toFixed(2)})
                        </option>
                      ))}
                    </select>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Sauce
                    </label>
                    <select
                      value={formData.sauceId}
                      onChange={(e) => setFormData(prev => ({ ...prev, sauceId: e.target.value }))}
                      className="w-full border border-gray-300 rounded px-3 py-2"
                      required
                    >
                      <option value="">Select Sauce</option>
                      {sauces.map(sauce => (
                        <option key={sauce.id} value={sauce.id}>
                          {sauce.name} ({sauce.priceModifier >= 0 ? '+' : ''}${sauce.priceModifier.toFixed(2)})
                        </option>
                      ))}
                    </select>
                  </div>
                </div>

                {/* Intensity Settings */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Sauce Intensity
                    </label>
                    <select
                      value={formData.sauceIntensity}
                      onChange={(e) => setFormData(prev => ({ ...prev, sauceIntensity: e.target.value as any }))}
                      className="w-full border border-gray-300 rounded px-3 py-2"
                    >
                      <option value="LIGHT">Light</option>
                      <option value="REGULAR">Regular</option>
                      <option value="EXTRA">Extra</option>
                    </select>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Crust Cooking Level
                    </label>
                    <select
                      value={formData.crustCookingLevel}
                      onChange={(e) => setFormData(prev => ({ ...prev, crustCookingLevel: e.target.value as any }))}
                      className="w-full border border-gray-300 rounded px-3 py-2"
                    >
                      <option value="LIGHT">Light</option>
                      <option value="REGULAR">Regular</option>
                      <option value="WELL_DONE">Well Done</option>
                    </select>
                  </div>
                </div>

                {/* Toppings Selection */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-3">
                    Toppings
                  </label>
                  
                  {Object.entries(groupedToppings).map(([category, categoryToppings]) => (
                    <div key={category} className="mb-4">
                      <h4 className="font-medium text-gray-800 mb-2">{category}</h4>
                      <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2">
                        {categoryToppings.map(topping => {
                          const selectedTopping = formData.toppings.find(t => t.toppingId === topping.id);
                          const isSelected = !!selectedTopping;
                          
                          return (
                            <div key={topping.id} className="border rounded-lg p-2">
                              <div className="flex items-center justify-between mb-1">
                                <span className="text-sm font-medium">{topping.name}</span>
                                <span className="text-xs text-gray-500">${topping.price.toFixed(2)}</span>
                              </div>
                              
                              {!isSelected ? (
                                <div className="flex space-x-1">
                                  <button
                                    type="button"
                                    onClick={() => addTopping(topping.id, 'WHOLE')}
                                    className="flex-1 py-1 px-2 text-xs bg-gray-100 hover:bg-blue-100 rounded"
                                  >
                                    WHOLE
                                  </button>
                                  <button
                                    type="button"
                                    onClick={() => addTopping(topping.id, 'LEFT')}
                                    className="flex-1 py-1 px-2 text-xs bg-gray-100 hover:bg-blue-100 rounded"
                                  >
                                    LEFT
                                  </button>
                                  <button
                                    type="button"
                                    onClick={() => addTopping(topping.id, 'RIGHT')}
                                    className="flex-1 py-1 px-2 text-xs bg-gray-100 hover:bg-blue-100 rounded"
                                  >
                                    RIGHT
                                  </button>
                                </div>
                              ) : (
                                <div className="space-y-1">
                                  <div className="flex items-center justify-between">
                                    <span className="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded">
                                      {selectedTopping.section}
                                    </span>
                                    <button
                                      type="button"
                                      onClick={() => removeTopping(topping.id)}
                                      className="text-xs text-red-600 hover:text-red-800"
                                    >
                                      Remove
                                    </button>
                                  </div>
                                  <select
                                    value={selectedTopping.intensity}
                                    onChange={(e) => updateToppingIntensity(topping.id, e.target.value as any)}
                                    className="w-full text-xs border border-gray-300 rounded px-2 py-1"
                                  >
                                    <option value="LIGHT">Light</option>
                                    <option value="REGULAR">Regular</option>
                                    <option value="EXTRA">Extra</option>
                                  </select>
                                </div>
                              )}
                            </div>
                          );
                        })}
                      </div>
                    </div>
                  ))}
                </div>

                {/* Price Summary */}
                <div className="bg-gray-50 p-4 rounded-lg">
                  <h4 className="font-medium text-gray-800 mb-2">Price Summary</h4>
                  <div className="text-lg font-bold text-green-600">
                    Total: ${calculateTotalPrice().toFixed(2)}
                  </div>
                  <p className="text-sm text-gray-600 mt-1">
                    {formData.toppings.length} toppings selected
                  </p>
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={formData.isActive}
                      onChange={(e) => setFormData(prev => ({ ...prev, isActive: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Active (available for customers)</span>
                  </label>
                </div>

                <div className="flex space-x-3">
                  <button
                    type="submit"
                    className="flex-1 bg-blue-600 text-white py-2 rounded hover:bg-blue-700"
                  >
                    {editingPizza ? 'Update Specialty Pizza' : 'Create Specialty Pizza'}
                  </button>
                  <button
                    type="button"
                    onClick={() => setShowForm(false)}
                    className="flex-1 bg-gray-300 text-gray-700 py-2 rounded hover:bg-gray-400"
                  >
                    Cancel
                  </button>
                </div>
              </form>
            </div>
          </div>
        )}

        {/* Specialty Pizzas List */}
        <div className="bg-white rounded-lg shadow">
          <div className="px-6 py-4 border-b border-gray-200">
            <h3 className="text-lg font-semibold">Existing Specialty Pizzas</h3>
          </div>
          
          {loading ? (
            <div className="p-6 text-center">Loading...</div>
          ) : specialtyPizzas.length === 0 ? (
            <div className="p-6 text-center text-gray-500">
              No specialty pizzas found. Create your first specialty pizza to get started!
              <br />
              <br />
              <div className="text-sm bg-blue-50 text-blue-800 p-4 rounded-lg">
                <strong>💡 What is a Specialty Pizza?</strong>
                <br />
                A pre-configured pizza (like "Meat Lover's") that customers can order as-is or customize further.
                <br />
                Customers will see these on the menu with "Add to Cart" and "Customize" buttons.
              </div>
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 p-6">
              {specialtyPizzas.map(pizza => (
                <div key={pizza.id} className="border rounded-lg p-4">
                  <h4 className="font-semibold text-lg">{pizza.name}</h4>
                  <p className="text-sm text-gray-600 mb-2">{pizza.description}</p>
                  <div className="text-lg font-bold text-green-600 mb-2">
                    ${pizza.basePrice.toFixed(2)}
                  </div>
                  <div className="text-xs text-gray-500 mb-3">
                    {pizza.toppings.length} toppings
                  </div>
                  <div className="flex space-x-2">
                    <button className="flex-1 text-xs bg-blue-100 text-blue-800 py-1 rounded">
                      Edit
                    </button>
                    <button className="flex-1 text-xs bg-red-100 text-red-800 py-1 rounded">
                      Delete
                    </button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </AdminLayout>
  );
}
