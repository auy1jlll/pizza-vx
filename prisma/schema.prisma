// Pizza Builder Database Schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String?
  role      UserRole @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders Order[]
  
  @@map("users")
}

enum UserRole {
  CUSTOMER
  EMPLOYEE
  ADMIN
  SUPER_ADMIN
}

// Pizza Components
model PizzaSize {
  id          String  @id @default(cuid())
  name        String  @unique
  diameter    String  // e.g., "10 inches", "12 inches", "16 inches"
  basePrice   Float   // Base price for this size
  isActive    Boolean @default(true)
  sortOrder   Int     @default(0)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  orderItems          OrderItem[]
  specialtyPizzaSizes SpecialtyPizzaSize[]
  
  @@map("pizza_sizes")
}

model PizzaCrust {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  priceModifier Float @default(0)
  isActive    Boolean @default(true)
  sortOrder   Int     @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  orderItems OrderItem[]
  
  @@map("pizza_crusts")
}

model PizzaSauce {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  color       String? // Hex color for UI
  spiceLevel  Int     @default(0) // 0-5 scale
  priceModifier Float @default(0)
  isActive    Boolean @default(true)
  sortOrder   Int     @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  orderItems OrderItem[]
  
  @@map("pizza_sauces")
}

model PizzaTopping {
  id          String        @id @default(cuid())
  name        String        @unique
  description String?
  category    ToppingCategory
  price       Float
  isActive    Boolean       @default(true)
  sortOrder   Int           @default(0)
  isVegetarian Boolean      @default(false)
  isVegan     Boolean       @default(false)
  isGlutenFree Boolean     @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  orderItemToppings OrderItemTopping[]
  
  @@map("pizza_toppings")
}

enum ToppingCategory {
  MEAT
  VEGETABLE
  CHEESE
  SAUCE
  SPECIALTY
}

// Specialty Pizzas
model SpecialtyPizza {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  basePrice   Float    // Base price for the default/medium size
  category    String   // e.g., "Classic", "Premium", "Vegetarian", "Meat Lovers"
  imageUrl    String?
  ingredients String   // JSON string of ingredient names
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  sizes       SpecialtyPizzaSize[]
  
  @@map("specialty_pizzas")
}

// Specialty Pizza Size Pricing
model SpecialtyPizzaSize {
  id              String        @id @default(cuid())
  specialtyPizzaId String
  pizzaSizeId     String
  price           Float         // Price for this specialty pizza in this size
  isAvailable     Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  specialtyPizza  SpecialtyPizza @relation(fields: [specialtyPizzaId], references: [id], onDelete: Cascade)
  pizzaSize       PizzaSize     @relation(fields: [pizzaSizeId], references: [id])
  
  @@unique([specialtyPizzaId, pizzaSizeId])
  @@map("specialty_pizza_sizes")
}

// Order Management
model Order {
  id            String      @id @default(cuid())
  orderNumber   String      @unique
  userId        String?
  customerName  String?
  customerEmail String?
  customerPhone String?
  status        OrderStatus @default(PENDING)
  
  // Order Type and Delivery
  orderType     OrderType   @default(PICKUP)
  paymentMethod String?
  deliveryAddress String?
  deliveryCity    String?
  deliveryZip     String?
  deliveryInstructions String?
  scheduledTime   DateTime?
  
  // Pricing
  subtotal         Float
  deliveryFee      Float       @default(0)
  tipAmount        Float?
  tipPercentage    Float?
  customTipAmount  Float?
  tax              Float
  total            Float
  notes         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  user           User?           @relation(fields: [userId], references: [id])
  orderItems     OrderItem[]
  priceSnapshots PriceSnapshot[]
  
  @@map("orders")
}

enum OrderType {
  PICKUP
  DELIVERY
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  COMPLETED
  CANCELLED
}

model OrderItem {
  id           String  @id @default(cuid())
  orderId      String
  pizzaSizeId  String
  pizzaCrustId String
  pizzaSauceId String
  quantity     Int     @default(1)
  basePrice    Float
  totalPrice   Float
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  order      Order              @relation(fields: [orderId], references: [id], onDelete: Cascade)
  pizzaSize  PizzaSize         @relation(fields: [pizzaSizeId], references: [id])
  pizzaCrust PizzaCrust        @relation(fields: [pizzaCrustId], references: [id])
  pizzaSauce PizzaSauce        @relation(fields: [pizzaSauceId], references: [id])
  toppings   OrderItemTopping[]
  
  @@map("order_items")
}

model OrderItemTopping {
  id            String @id @default(cuid())
  orderItemId   String
  pizzaToppingId String
  quantity      Int    @default(1)
  section       String @default("WHOLE") // WHOLE, LEFT, RIGHT
  intensity     String @default("REGULAR") // LIGHT, REGULAR, EXTRA
  price         Float
  createdAt     DateTime @default(now())

  // Relations
  orderItem    OrderItem    @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  pizzaTopping PizzaTopping @relation(fields: [pizzaToppingId], references: [id])
  
  @@unique([orderItemId, pizzaToppingId, section])
  @@map("order_item_toppings")
}

// Settings and Configuration
model AppSetting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  type      SettingType @default(STRING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("app_settings")
}

enum SettingType {
  STRING
  NUMBER
  BOOLEAN
  JSON
}

// Pricing Snapshots for Historical Accuracy
model PriceSnapshot {
  id            String   @id @default(cuid())
  orderId       String
  componentType String   // 'SIZE', 'CRUST', 'SAUCE', 'TOPPING'
  componentId   String
  componentName String
  snapshotPrice Float
  createdAt     DateTime @default(now())

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  @@map("price_snapshots")
}

model PricingHistory {
  id            String   @id @default(cuid())
  componentType String   // 'SIZE', 'CRUST', 'SAUCE', 'TOPPING'
  componentId   String
  componentName String
  oldPrice      Float?
  newPrice      Float
  changeReason  String?
  changedBy     String?
  changedAt     DateTime @default(now())
  
  @@map("pricing_history")
}
