generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(cuid())
  email            String            @unique
  name             String?
  password         String?
  phone            String?
  dateOfBirth      DateTime?
  avatarUrl        String?
  isActive         Boolean           @default(true)
  lastLoginAt      DateTime?
  emailVerified    Boolean           @default(false)
  marketingOptIn   Boolean           @default(false)
  role             UserRole          @default(CUSTOMER)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  cartItems        CartItem[]
  orders           Order[]
  refreshTokens    RefreshToken[]
  customerProfile  CustomerProfile?
  employeeProfile  EmployeeProfile?
  customerAddresses CustomerAddress[]
  customerFavorites CustomerFavorite[]

  @@map("users")
}

model CustomerProfile {
  id                   String       @id @default(cuid())
  userId               String       @unique
  firstName            String?
  lastName             String?
  dateOfBirth          DateTime?
  phone                String?
  avatarUrl            String?
  dietaryPreferences   String[]     // ['vegan', 'gluten-free', 'dairy-free', etc.]
  favoritePizzaSizeId  String?
  favoriteCrustId      String?
  defaultOrderType     OrderType    @default(PICKUP)
  marketingOptIn       Boolean      @default(false)
  loyaltyPoints        Int          @default(0)
  totalOrders          Int          @default(0)
  totalSpent           Float        @default(0.00)
  lastOrderDate        DateTime?
  notes                String?
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  
  user                 User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  favoritePizzaSize    PizzaSize?   @relation("CustomerFavoritePizzaSize", fields: [favoritePizzaSizeId], references: [id])
  favoriteCrust        PizzaCrust?  @relation("CustomerFavoriteCrust", fields: [favoriteCrustId], references: [id])

  @@map("customer_profiles")
}

model CustomerAddress {
  id                   String       @id @default(cuid())
  userId               String
  label                String       // 'Home', 'Work', 'Other'
  addressLine1         String
  addressLine2         String?
  city                 String
  state                String
  zipCode              String
  country              String       @default("US")
  deliveryInstructions String?
  isDefault            Boolean      @default(false)
  isActive             Boolean      @default(true)
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  
  user                 User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("customer_addresses")
}

model EmployeeProfile {
  id                     String       @id @default(cuid())
  userId                 String       @unique
  employeeId             String       @unique
  firstName              String
  lastName               String
  position               String?      // 'Manager', 'Chef', 'Delivery', 'Cashier'
  department             String?      // 'Kitchen', 'Front', 'Delivery'
  phone                  String?
  emergencyContactName   String?
  emergencyContactPhone  String?
  hireDate               DateTime?
  hourlyWage             Float?
  isActive               Boolean      @default(true)
  permissions            String[]     // ['order_management', 'menu_edit', 'user_management']
  scheduleNotes          String?
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
  
  user                   User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("employee_profiles")
}

model CustomerFavorite {
  id            String       @id @default(cuid())
  userId        String
  favoriteName  String
  itemType      String       // 'PIZZA', 'CALZONE', 'SPECIALTY'
  itemData      Json         // Complete item configuration
  orderCount    Int          @default(0)
  lastOrdered   DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("customer_favorites")
}

model PizzaSize {
  id                   String                 @id @default(cuid())
  name                 String                 @unique
  diameter             String
  basePrice            Float
  isActive             Boolean                @default(true)
  sortOrder            Int                    @default(0)
  description          String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  productType          ProductType            @default(PIZZA)
  cartItems            CartItem[]
  orderItems           OrderItem[]
  specialtyPizzaSizes  SpecialtyPizzaSize[]
  specialtyCalzoneSizes SpecialtyCalzoneSize[]
  customerProfiles     CustomerProfile[]      @relation("CustomerFavoritePizzaSize")

  @@map("pizza_sizes")
}

model PizzaCrust {
  id               String            @id @default(cuid())
  name             String            @unique
  description      String?
  priceModifier    Float             @default(0)
  isActive         Boolean           @default(true)
  sortOrder        Int               @default(0)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  cartItems        CartItem[]
  orderItems       OrderItem[]
  customerProfiles CustomerProfile[] @relation("CustomerFavoriteCrust")

  @@map("pizza_crusts")
}

model PizzaSauce {
  id            String      @id @default(cuid())
  name          String      @unique
  description   String?
  color         String?
  spiceLevel    Int         @default(0)
  priceModifier Float       @default(0)
  isActive      Boolean     @default(true)
  sortOrder     Int         @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  cartItems     CartItem[]
  orderItems    OrderItem[]

  @@map("pizza_sauces")
}

model PizzaTopping {
  id                String                 @id @default(cuid())
  name              String                 @unique
  description       String?
  category          ToppingCategory
  price             Float
  isActive          Boolean                @default(true)
  sortOrder         Int                    @default(0)
  isVegetarian      Boolean                @default(false)
  isVegan           Boolean                @default(false)
  isGlutenFree      Boolean                @default(false)
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  cartItemToppings  CartItemPizzaTopping[]
  orderItemToppings OrderItemTopping[]

  @@map("pizza_toppings")
}

model SpecialtyPizza {
  id          String               @id @default(cuid())
  name        String               @unique
  description String
  basePrice   Float
  category    String
  imageUrl    String?
  ingredients String
  isActive    Boolean              @default(true)
  sortOrder   Int                  @default(0)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  sizes       SpecialtyPizzaSize[]

  @@map("specialty_pizzas")
}

model SpecialtyPizzaSize {
  id               String         @id @default(cuid())
  specialtyPizzaId String
  pizzaSizeId      String
  price            Float
  isAvailable      Boolean        @default(true)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  pizzaSize        PizzaSize      @relation(fields: [pizzaSizeId], references: [id])
  specialtyPizza   SpecialtyPizza @relation(fields: [specialtyPizzaId], references: [id], onDelete: Cascade)

  @@unique([specialtyPizzaId, pizzaSizeId])
  @@map("specialty_pizza_sizes")
}

model SpecialtyCalzone {
  id               String                 @id @default(cuid())
  calzoneName      String                 @unique
  calzoneDescription String
  basePrice        Float
  category         String
  imageUrl         String?
  fillings         String
  isActive         Boolean                @default(true)
  sortOrder        Int                    @default(0)
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  sizes            SpecialtyCalzoneSize[]

  @@map("specialty_calzones")
}

model SpecialtyCalzoneSize {
  id                String           @id @default(cuid())
  specialtyCalzoneId String
  pizzaSizeId       String
  price             Float
  isAvailable       Boolean          @default(true)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  pizzaSize         PizzaSize        @relation(fields: [pizzaSizeId], references: [id])
  specialtyCalzone  SpecialtyCalzone @relation(fields: [specialtyCalzoneId], references: [id], onDelete: Cascade)

  @@unique([specialtyCalzoneId, pizzaSizeId])
  @@map("specialty_calzone_sizes")
}

model Order {
  id                   String          @id @default(cuid())
  orderNumber          String          @unique
  userId               String?
  customerName         String?
  customerEmail        String?
  customerPhone        String?
  status               OrderStatus     @default(PENDING)
  orderType            OrderType       @default(PICKUP)
  scheduleType         String?         @default("NOW")
  paymentMethod        String?
  deliveryAddress      String?
  deliveryCity         String?
  deliveryZip          String?
  deliveryInstructions String?
  scheduledTime        DateTime?
  subtotal             Float
  deliveryFee          Float           @default(0)
  tipAmount            Float?
  tipPercentage        Float?
  customTipAmount      Float?
  tax                  Float
  total                Float
  notes                String?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  orderItems           OrderItem[]
  user                 User?           @relation(fields: [userId], references: [id])
  priceSnapshots       PriceSnapshot[]

  @@map("orders")
}

model OrderItem {
  id             String                   @id @default(cuid())
  orderId        String
  pizzaSizeId    String?
  pizzaCrustId   String?
  pizzaSauceId   String?
  menuItemId     String?
  quantity       Int                      @default(1)
  basePrice      Float
  totalPrice     Float
  notes          String?
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt
  customizations OrderItemCustomization[]
  toppings       OrderItemTopping[]
  menuItem       MenuItem?                @relation(fields: [menuItemId], references: [id])
  order          Order                    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  pizzaCrust     PizzaCrust?              @relation(fields: [pizzaCrustId], references: [id])
  pizzaSauce     PizzaSauce?              @relation(fields: [pizzaSauceId], references: [id])
  pizzaSize      PizzaSize?               @relation(fields: [pizzaSizeId], references: [id])

  @@map("order_items")
}

model OrderItemTopping {
  id             String       @id @default(cuid())
  orderItemId    String
  pizzaToppingId String
  quantity       Int          @default(1)
  section        String       @default("WHOLE")
  intensity      String       @default("REGULAR")
  price          Float
  createdAt      DateTime     @default(now())
  orderItem      OrderItem    @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  pizzaTopping   PizzaTopping @relation(fields: [pizzaToppingId], references: [id])

  @@unique([orderItemId, pizzaToppingId, section])
  @@map("order_item_toppings")
}

model OrderItemCustomization {
  id                    String              @id @default(cuid())
  orderItemId           String
  customizationOptionId String
  quantity              Int                 @default(1)
  price                 Float
  pizzaHalf             String?
  createdAt             DateTime            @default(now())
  customizationOption   CustomizationOption @relation(fields: [customizationOptionId], references: [id])
  orderItem             OrderItem           @relation(fields: [orderItemId], references: [id], onDelete: Cascade)

  @@map("order_item_customizations")
}

model AppSetting {
  id        String      @id @default(cuid())
  key       String      @unique
  value     String
  type      SettingType @default(STRING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@map("app_settings")
}

model PriceSnapshot {
  id            String   @id @default(cuid())
  orderId       String
  componentType String
  componentId   String
  componentName String
  snapshotPrice Float
  createdAt     DateTime @default(now())
  order         Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("price_snapshots")
}

model PricingHistory {
  id            String   @id @default(cuid())
  componentType String
  componentId   String
  componentName String
  oldPrice      Float?
  newPrice      Float
  changeReason  String?
  changedBy     String?
  changedAt     DateTime @default(now())

  @@map("pricing_history")
}

model RefreshToken {
  id                String    @id @default(cuid())
  userId            String
  tokenHash         String    @unique
  deviceFingerprint String?
  ipAddress         String?
  userAgent         String?
  revoked           Boolean   @default(false)
  revokedAt         DateTime?
  expiresAt         DateTime
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@map("refresh_tokens")
}

model JwtBlacklist {
  id        String   @id @default(cuid())
  jti       String   @unique
  expiresAt DateTime
  reason    String?
  createdAt DateTime @default(now())

  @@index([expiresAt])
  @@map("jwt_blacklist")
}

model JwtSecret {
  id        String    @id @default(cuid())
  kid       String    @unique
  secret    String
  algorithm String    @default("HS256")
  isActive  Boolean   @default(true)
  rotatedAt DateTime?
  createdAt DateTime  @default(now())

  @@map("jwt_secrets")
}

model MenuCategory {
  id                  String               @id @default(cuid())
  name                String               @unique
  slug                String               @unique
  description         String?
  parentCategoryId    String?
  imageUrl            String?
  isActive            Boolean              @default(true)
  sortOrder           Int                  @default(0)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  customizationGroups CustomizationGroup[]
  parentCategory      MenuCategory?        @relation("CategoryHierarchy", fields: [parentCategoryId], references: [id])
  subcategories       MenuCategory[]       @relation("CategoryHierarchy")
  menuItems           MenuItem[]

  @@map("menu_categories")
}

model MenuItem {
  id                  String                  @id @default(cuid())
  categoryId          String
  name                String
  description         String?
  basePrice           Float
  imageUrl            String?
  isActive            Boolean                 @default(true)
  isAvailable         Boolean                 @default(true)
  sortOrder           Int                     @default(0)
  preparationTime     Int?
  allergens           String?
  nutritionInfo       String?
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @updatedAt
  cartItems           CartItem[]
  modifiers           ItemModifier[]
  customizationGroups MenuItemCustomization[]
  category            MenuCategory            @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  orderItems          OrderItem[]

  @@index([categoryId])
  @@map("menu_items")
}

model Modifier {
  id        String         @id @default(cuid())
  name      String
  type      ModifierType
  price     Float          @default(0)
  isActive  Boolean        @default(true)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  items     ItemModifier[]

  @@map("modifiers")
}

model ItemModifier {
  id            String   @id @default(cuid())
  itemId        String
  modifierId    String
  isDefault     Boolean  @default(false)
  maxSelectable Int?
  createdAt     DateTime @default(now())
  item          MenuItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  modifier      Modifier @relation(fields: [modifierId], references: [id], onDelete: Cascade)

  @@unique([itemId, modifierId])
  @@map("item_modifiers")
}

model CustomizationGroup {
  id                     String                  @id @default(cuid())
  categoryId             String?
  name                   String
  description            String?
  type                   CustomizationType
  isRequired             Boolean                 @default(false)
  minSelections          Int                     @default(0)
  maxSelections          Int?
  sortOrder              Int                     @default(0)
  isActive               Boolean                 @default(true)
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  category               MenuCategory?           @relation(fields: [categoryId], references: [id])
  options                CustomizationOption[]
  menuItemCustomizations MenuItemCustomization[]

  @@index([categoryId])
  @@map("customization_groups")
}

model CustomizationOption {
  id                      String                   @id @default(cuid())
  groupId                 String
  name                    String
  description             String?
  priceModifier           Float                    @default(0)
  priceType               PriceType                @default(FLAT)
  isDefault               Boolean                  @default(false)
  isActive                Boolean                  @default(true)
  sortOrder               Int                      @default(0)
  maxQuantity             Int?
  nutritionInfo           String?
  allergens               String?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  cartItemCustomizations  CartItemCustomization[]
  group                   CustomizationGroup       @relation(fields: [groupId], references: [id], onDelete: Cascade)
  orderItemCustomizations OrderItemCustomization[]

  @@index([groupId])
  @@map("customization_options")
}

model MenuItemCustomization {
  id                   String             @id @default(cuid())
  menuItemId           String
  customizationGroupId String
  isRequired           Boolean            @default(false)
  sortOrder            Int                @default(0)
  createdAt            DateTime           @default(now())
  customizationGroup   CustomizationGroup @relation(fields: [customizationGroupId], references: [id], onDelete: Cascade)
  menuItem             MenuItem           @relation(fields: [menuItemId], references: [id], onDelete: Cascade)

  @@unique([menuItemId, customizationGroupId])
  @@map("menu_item_customizations")
}

model CartItem {
  id             String                  @id @default(cuid())
  sessionId      String?
  userId         String?
  pizzaSizeId    String?
  pizzaCrustId   String?
  pizzaSauceId   String?
  menuItemId     String?
  quantity       Int                     @default(1)
  basePrice      Float
  totalPrice     Float
  notes          String?
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt
  customizations CartItemCustomization[]
  pizzaToppings  CartItemPizzaTopping[]
  menuItem       MenuItem?               @relation(fields: [menuItemId], references: [id])
  pizzaCrust     PizzaCrust?             @relation(fields: [pizzaCrustId], references: [id])
  pizzaSauce     PizzaSauce?             @relation(fields: [pizzaSauceId], references: [id])
  pizzaSize      PizzaSize?              @relation(fields: [pizzaSizeId], references: [id])
  user           User?                   @relation(fields: [userId], references: [id])

  @@index([sessionId])
  @@index([userId])
  @@map("cart_items")
}

model CartItemCustomization {
  id                    String              @id @default(cuid())
  cartItemId            String
  customizationOptionId String
  quantity              Int                 @default(1)
  price                 Float
  createdAt             DateTime            @default(now())
  cartItem              CartItem            @relation(fields: [cartItemId], references: [id], onDelete: Cascade)
  customizationOption   CustomizationOption @relation(fields: [customizationOptionId], references: [id])

  @@map("cart_item_customizations")
}

model CartItemPizzaTopping {
  id             String       @id @default(cuid())
  cartItemId     String
  pizzaToppingId String
  quantity       Int          @default(1)
  section        String       @default("WHOLE")
  intensity      String       @default("REGULAR")
  price          Float
  createdAt      DateTime     @default(now())
  cartItem       CartItem     @relation(fields: [cartItemId], references: [id], onDelete: Cascade)
  pizzaTopping   PizzaTopping @relation(fields: [pizzaToppingId], references: [id])

  @@map("cart_item_pizza_toppings")
}

enum UserRole {
  CUSTOMER
  EMPLOYEE
  ADMIN
  SUPER_ADMIN
}

enum ProductType {
  PIZZA
  CALZONE
}

enum ToppingCategory {
  MEAT
  VEGETABLE
  CHEESE
  SAUCE
  SPECIALTY
}

enum OrderType {
  PICKUP
  DELIVERY
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  COMPLETED
  CANCELLED
}

enum SettingType {
  STRING
  NUMBER
  BOOLEAN
  JSON
}

enum ModifierType {
  TOPPING
  SIDE
  DRESSING
  CONDIMENT
  SIZE
}

enum CustomizationType {
  SINGLE_SELECT
  MULTI_SELECT
  QUANTITY_SELECT
  SPECIAL_LOGIC
}

enum PriceType {
  FLAT
  PERCENTAGE
  PER_UNIT
}

// Promotion Management
model Promotion {
  id                     String    @id @default(cuid())
  name                   String
  description            String?
  type                   PromotionType
  discountType           DiscountType
  discountValue          Decimal   @db.Decimal(10,2)
  minimumOrderAmount     Decimal?  @db.Decimal(10,2)
  maximumDiscountAmount  Decimal?  @db.Decimal(10,2)
  minimumQuantity        Int?
  applicableCategories   String[]  // Category IDs this promotion applies to
  applicableItems        String[]  // Specific item IDs this promotion applies to
  requiresLogin          Boolean   @default(false)
  userGroupRestrictions  String[]  // User roles/groups that can use this promotion
  startDate              DateTime?
  endDate                DateTime?
  isActive               Boolean   @default(true)
  usageLimit             Int?      // Total usage limit across all users
  usageCount             Int       @default(0)
  perUserLimit           Int?      // Usage limit per user
  stackable              Boolean   @default(false) // Can be combined with other promotions
  priority               Int       @default(0) // Higher priority promotions apply first
  terms                  String?   // Terms and conditions
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  @@index([type])
  @@index([isActive])
  @@index([startDate, endDate])
  @@index([priority])
  @@map("promotions")
}

enum PromotionType {
  PERCENTAGE_DISCOUNT    // X% off
  FIXED_AMOUNT_DISCOUNT  // $X off
  BOGO_HALF_OFF         // Buy one get second half off
  BOGO_FREE             // Buy one get one free
  BUY_X_GET_Y_PERCENT   // Buy X items get Y% off
  BUY_X_GET_Y_FREE      // Buy X items get Y free
  CATEGORY_DISCOUNT     // Discount on specific categories
  ITEM_DISCOUNT         // Discount on specific items
  FREE_DELIVERY         // Free delivery promotion
  HAPPY_HOUR            // Time-based discount
}

enum DiscountType {
  PERCENTAGE            // Percentage off (5, 10, 20, etc.)
  FIXED_AMOUNT         // Fixed dollar amount off ($5, $10, etc.)
  FREE_ITEM            // Free item/service
}
