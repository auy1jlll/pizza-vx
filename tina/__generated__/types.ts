//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** References another document, used as a foreign key */
  Reference: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  basename: Scalars['String']['output'];
  hasReferences?: Maybe<Scalars['Boolean']['output']>;
  breadcrumbs: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  relativePath: Scalars['String']['output'];
  extension: Scalars['String']['output'];
  template: Scalars['String']['output'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean']['output'];
  hasNextPage: Scalars['Boolean']['output'];
  startCursor: Scalars['String']['output'];
  endCursor: Scalars['String']['output'];
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type Document = {
  id: Scalars['ID']['output'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON']['output'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float']['output'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']['output']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  page: Page;
  pageConnection: PageConnection;
  menuItem: MenuItem;
  menuItemConnection: MenuItemConnection;
  settings: Settings;
  settingsConnection: SettingsConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String']['input'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPageArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPageConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PageFilter>;
};


export type QueryMenuItemArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryMenuItemConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<MenuItemFilter>;
};


export type QuerySettingsArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QuerySettingsConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SettingsFilter>;
};

export type DocumentFilter = {
  page?: InputMaybe<PageFilter>;
  menuItem?: InputMaybe<MenuItemFilter>;
  settings?: InputMaybe<SettingsFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  format?: Maybe<Scalars['String']['output']>;
  matches?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentNode = Page | MenuItem | Settings | Folder;

export type Page = Node & Document & {
  __typename?: 'Page';
  title: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
  slug: Scalars['String']['output'];
  published: Scalars['Boolean']['output'];
  createdAt?: Maybe<Scalars['String']['output']>;
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type BooleanFilter = {
  eq?: InputMaybe<Scalars['Boolean']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type DatetimeFilter = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type PageBodyHeroFilter = {
  title?: InputMaybe<StringFilter>;
  subtitle?: InputMaybe<StringFilter>;
  backgroundImage?: InputMaybe<ImageFilter>;
};

export type PageBodyCallToActionFilter = {
  text?: InputMaybe<StringFilter>;
  link?: InputMaybe<StringFilter>;
  style?: InputMaybe<StringFilter>;
};

export type PageBodyFilter = {
  Hero?: InputMaybe<PageBodyHeroFilter>;
  CallToAction?: InputMaybe<PageBodyCallToActionFilter>;
};

export type PageFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  slug?: InputMaybe<StringFilter>;
  published?: InputMaybe<BooleanFilter>;
  createdAt?: InputMaybe<DatetimeFilter>;
  body?: InputMaybe<PageBodyFilter>;
};

export type PageConnectionEdges = {
  __typename?: 'PageConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Page>;
};

export type PageConnection = Connection & {
  __typename?: 'PageConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<PageConnectionEdges>>>;
};

export type MenuItemNutritionInfo = {
  __typename?: 'MenuItemNutritionInfo';
  calories?: Maybe<Scalars['Float']['output']>;
  protein?: Maybe<Scalars['Float']['output']>;
  carbs?: Maybe<Scalars['Float']['output']>;
  fat?: Maybe<Scalars['Float']['output']>;
};

export type MenuItem = Node & Document & {
  __typename?: 'MenuItem';
  name: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
  price: Scalars['Float']['output'];
  category: Scalars['String']['output'];
  image?: Maybe<Scalars['String']['output']>;
  featured?: Maybe<Scalars['Boolean']['output']>;
  available: Scalars['Boolean']['output'];
  nutritionInfo?: Maybe<MenuItemNutritionInfo>;
  allergens?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type NumberFilter = {
  lt?: InputMaybe<Scalars['Float']['input']>;
  lte?: InputMaybe<Scalars['Float']['input']>;
  gte?: InputMaybe<Scalars['Float']['input']>;
  gt?: InputMaybe<Scalars['Float']['input']>;
  eq?: InputMaybe<Scalars['Float']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['Float']['input']>>>;
};

export type MenuItemNutritionInfoFilter = {
  calories?: InputMaybe<NumberFilter>;
  protein?: InputMaybe<NumberFilter>;
  carbs?: InputMaybe<NumberFilter>;
  fat?: InputMaybe<NumberFilter>;
};

export type MenuItemFilter = {
  name?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  price?: InputMaybe<NumberFilter>;
  category?: InputMaybe<StringFilter>;
  image?: InputMaybe<ImageFilter>;
  featured?: InputMaybe<BooleanFilter>;
  available?: InputMaybe<BooleanFilter>;
  nutritionInfo?: InputMaybe<MenuItemNutritionInfoFilter>;
  allergens?: InputMaybe<StringFilter>;
};

export type MenuItemConnectionEdges = {
  __typename?: 'MenuItemConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<MenuItem>;
};

export type MenuItemConnection = Connection & {
  __typename?: 'MenuItemConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<MenuItemConnectionEdges>>>;
};

export type SettingsContact = {
  __typename?: 'SettingsContact';
  phone?: Maybe<Scalars['String']['output']>;
  email?: Maybe<Scalars['String']['output']>;
  address?: Maybe<Scalars['String']['output']>;
};

export type SettingsHours = {
  __typename?: 'SettingsHours';
  monday?: Maybe<Scalars['String']['output']>;
  tuesday?: Maybe<Scalars['String']['output']>;
  wednesday?: Maybe<Scalars['String']['output']>;
  thursday?: Maybe<Scalars['String']['output']>;
  friday?: Maybe<Scalars['String']['output']>;
  saturday?: Maybe<Scalars['String']['output']>;
  sunday?: Maybe<Scalars['String']['output']>;
};

export type SettingsSocial = {
  __typename?: 'SettingsSocial';
  facebook?: Maybe<Scalars['String']['output']>;
  instagram?: Maybe<Scalars['String']['output']>;
  twitter?: Maybe<Scalars['String']['output']>;
};

export type Settings = Node & Document & {
  __typename?: 'Settings';
  siteName: Scalars['String']['output'];
  tagline?: Maybe<Scalars['String']['output']>;
  logo?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  contact?: Maybe<SettingsContact>;
  hours?: Maybe<SettingsHours>;
  social?: Maybe<SettingsSocial>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type SettingsContactFilter = {
  phone?: InputMaybe<StringFilter>;
  email?: InputMaybe<StringFilter>;
  address?: InputMaybe<StringFilter>;
};

export type SettingsHoursFilter = {
  monday?: InputMaybe<StringFilter>;
  tuesday?: InputMaybe<StringFilter>;
  wednesday?: InputMaybe<StringFilter>;
  thursday?: InputMaybe<StringFilter>;
  friday?: InputMaybe<StringFilter>;
  saturday?: InputMaybe<StringFilter>;
  sunday?: InputMaybe<StringFilter>;
};

export type SettingsSocialFilter = {
  facebook?: InputMaybe<StringFilter>;
  instagram?: InputMaybe<StringFilter>;
  twitter?: InputMaybe<StringFilter>;
};

export type SettingsFilter = {
  siteName?: InputMaybe<StringFilter>;
  tagline?: InputMaybe<StringFilter>;
  logo?: InputMaybe<ImageFilter>;
  description?: InputMaybe<StringFilter>;
  contact?: InputMaybe<SettingsContactFilter>;
  hours?: InputMaybe<SettingsHoursFilter>;
  social?: InputMaybe<SettingsSocialFilter>;
};

export type SettingsConnectionEdges = {
  __typename?: 'SettingsConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Settings>;
};

export type SettingsConnection = Connection & {
  __typename?: 'SettingsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<SettingsConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  createFolder: DocumentNode;
  updatePage: Page;
  createPage: Page;
  updateMenuItem: MenuItem;
  createMenuItem: MenuItem;
  updateSettings: Settings;
  createSettings: Settings;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String']['input'];
  relativePath: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentMutation;
};


export type MutationCreateFolderArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationUpdatePageArgs = {
  relativePath: Scalars['String']['input'];
  params: PageMutation;
};


export type MutationCreatePageArgs = {
  relativePath: Scalars['String']['input'];
  params: PageMutation;
};


export type MutationUpdateMenuItemArgs = {
  relativePath: Scalars['String']['input'];
  params: MenuItemMutation;
};


export type MutationCreateMenuItemArgs = {
  relativePath: Scalars['String']['input'];
  params: MenuItemMutation;
};


export type MutationUpdateSettingsArgs = {
  relativePath: Scalars['String']['input'];
  params: SettingsMutation;
};


export type MutationCreateSettingsArgs = {
  relativePath: Scalars['String']['input'];
  params: SettingsMutation;
};

export type DocumentUpdateMutation = {
  page?: InputMaybe<PageMutation>;
  menuItem?: InputMaybe<MenuItemMutation>;
  settings?: InputMaybe<SettingsMutation>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentMutation = {
  page?: InputMaybe<PageMutation>;
  menuItem?: InputMaybe<MenuItemMutation>;
  settings?: InputMaybe<SettingsMutation>;
};

export type PageMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  published?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type MenuItemNutritionInfoMutation = {
  calories?: InputMaybe<Scalars['Float']['input']>;
  protein?: InputMaybe<Scalars['Float']['input']>;
  carbs?: InputMaybe<Scalars['Float']['input']>;
  fat?: InputMaybe<Scalars['Float']['input']>;
};

export type MenuItemMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  price?: InputMaybe<Scalars['Float']['input']>;
  category?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
  featured?: InputMaybe<Scalars['Boolean']['input']>;
  available?: InputMaybe<Scalars['Boolean']['input']>;
  nutritionInfo?: InputMaybe<MenuItemNutritionInfoMutation>;
  allergens?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type SettingsContactMutation = {
  phone?: InputMaybe<Scalars['String']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  address?: InputMaybe<Scalars['String']['input']>;
};

export type SettingsHoursMutation = {
  monday?: InputMaybe<Scalars['String']['input']>;
  tuesday?: InputMaybe<Scalars['String']['input']>;
  wednesday?: InputMaybe<Scalars['String']['input']>;
  thursday?: InputMaybe<Scalars['String']['input']>;
  friday?: InputMaybe<Scalars['String']['input']>;
  saturday?: InputMaybe<Scalars['String']['input']>;
  sunday?: InputMaybe<Scalars['String']['input']>;
};

export type SettingsSocialMutation = {
  facebook?: InputMaybe<Scalars['String']['input']>;
  instagram?: InputMaybe<Scalars['String']['input']>;
  twitter?: InputMaybe<Scalars['String']['input']>;
};

export type SettingsMutation = {
  siteName?: InputMaybe<Scalars['String']['input']>;
  tagline?: InputMaybe<Scalars['String']['input']>;
  logo?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  contact?: InputMaybe<SettingsContactMutation>;
  hours?: InputMaybe<SettingsHoursMutation>;
  social?: InputMaybe<SettingsSocialMutation>;
};

export type PagePartsFragment = { __typename: 'Page', title: string, description?: string | null, slug: string, published: boolean, createdAt?: string | null, body?: any | null };

export type MenuItemPartsFragment = { __typename: 'MenuItem', name: string, description?: string | null, price: number, category: string, image?: string | null, featured?: boolean | null, available: boolean, allergens?: Array<string | null> | null, nutritionInfo?: { __typename: 'MenuItemNutritionInfo', calories?: number | null, protein?: number | null, carbs?: number | null, fat?: number | null } | null };

export type SettingsPartsFragment = { __typename: 'Settings', siteName: string, tagline?: string | null, logo?: string | null, description?: string | null, contact?: { __typename: 'SettingsContact', phone?: string | null, email?: string | null, address?: string | null } | null, hours?: { __typename: 'SettingsHours', monday?: string | null, tuesday?: string | null, wednesday?: string | null, thursday?: string | null, friday?: string | null, saturday?: string | null, sunday?: string | null } | null, social?: { __typename: 'SettingsSocial', facebook?: string | null, instagram?: string | null, twitter?: string | null } | null };

export type PageQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type PageQuery = { __typename?: 'Query', page: { __typename: 'Page', id: string, title: string, description?: string | null, slug: string, published: boolean, createdAt?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type PageConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PageFilter>;
}>;


export type PageConnectionQuery = { __typename?: 'Query', pageConnection: { __typename?: 'PageConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'PageConnectionEdges', cursor: string, node?: { __typename: 'Page', id: string, title: string, description?: string | null, slug: string, published: boolean, createdAt?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type MenuItemQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type MenuItemQuery = { __typename?: 'Query', menuItem: { __typename: 'MenuItem', id: string, name: string, description?: string | null, price: number, category: string, image?: string | null, featured?: boolean | null, available: boolean, allergens?: Array<string | null> | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, nutritionInfo?: { __typename: 'MenuItemNutritionInfo', calories?: number | null, protein?: number | null, carbs?: number | null, fat?: number | null } | null } };

export type MenuItemConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<MenuItemFilter>;
}>;


export type MenuItemConnectionQuery = { __typename?: 'Query', menuItemConnection: { __typename?: 'MenuItemConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'MenuItemConnectionEdges', cursor: string, node?: { __typename: 'MenuItem', id: string, name: string, description?: string | null, price: number, category: string, image?: string | null, featured?: boolean | null, available: boolean, allergens?: Array<string | null> | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, nutritionInfo?: { __typename: 'MenuItemNutritionInfo', calories?: number | null, protein?: number | null, carbs?: number | null, fat?: number | null } | null } | null } | null> | null } };

export type SettingsQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type SettingsQuery = { __typename?: 'Query', settings: { __typename: 'Settings', id: string, siteName: string, tagline?: string | null, logo?: string | null, description?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, contact?: { __typename: 'SettingsContact', phone?: string | null, email?: string | null, address?: string | null } | null, hours?: { __typename: 'SettingsHours', monday?: string | null, tuesday?: string | null, wednesday?: string | null, thursday?: string | null, friday?: string | null, saturday?: string | null, sunday?: string | null } | null, social?: { __typename: 'SettingsSocial', facebook?: string | null, instagram?: string | null, twitter?: string | null } | null } };

export type SettingsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SettingsFilter>;
}>;


export type SettingsConnectionQuery = { __typename?: 'Query', settingsConnection: { __typename?: 'SettingsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'SettingsConnectionEdges', cursor: string, node?: { __typename: 'Settings', id: string, siteName: string, tagline?: string | null, logo?: string | null, description?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, contact?: { __typename: 'SettingsContact', phone?: string | null, email?: string | null, address?: string | null } | null, hours?: { __typename: 'SettingsHours', monday?: string | null, tuesday?: string | null, wednesday?: string | null, thursday?: string | null, friday?: string | null, saturday?: string | null, sunday?: string | null } | null, social?: { __typename: 'SettingsSocial', facebook?: string | null, instagram?: string | null, twitter?: string | null } | null } | null } | null> | null } };

export const PagePartsFragmentDoc = gql`
    fragment PageParts on Page {
  __typename
  title
  description
  slug
  published
  createdAt
  body
}
    `;
export const MenuItemPartsFragmentDoc = gql`
    fragment MenuItemParts on MenuItem {
  __typename
  name
  description
  price
  category
  image
  featured
  available
  nutritionInfo {
    __typename
    calories
    protein
    carbs
    fat
  }
  allergens
}
    `;
export const SettingsPartsFragmentDoc = gql`
    fragment SettingsParts on Settings {
  __typename
  siteName
  tagline
  logo
  description
  contact {
    __typename
    phone
    email
    address
  }
  hours {
    __typename
    monday
    tuesday
    wednesday
    thursday
    friday
    saturday
    sunday
  }
  social {
    __typename
    facebook
    instagram
    twitter
  }
}
    `;
export const PageDocument = gql`
    query page($relativePath: String!) {
  page(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...PageParts
  }
}
    ${PagePartsFragmentDoc}`;
export const PageConnectionDocument = gql`
    query pageConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: PageFilter) {
  pageConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...PageParts
      }
    }
  }
}
    ${PagePartsFragmentDoc}`;
export const MenuItemDocument = gql`
    query menuItem($relativePath: String!) {
  menuItem(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...MenuItemParts
  }
}
    ${MenuItemPartsFragmentDoc}`;
export const MenuItemConnectionDocument = gql`
    query menuItemConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: MenuItemFilter) {
  menuItemConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...MenuItemParts
      }
    }
  }
}
    ${MenuItemPartsFragmentDoc}`;
export const SettingsDocument = gql`
    query settings($relativePath: String!) {
  settings(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...SettingsParts
  }
}
    ${SettingsPartsFragmentDoc}`;
export const SettingsConnectionDocument = gql`
    query settingsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: SettingsFilter) {
  settingsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...SettingsParts
      }
    }
  }
}
    ${SettingsPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      page(variables: PageQueryVariables, options?: C): Promise<{data: PageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PageQueryVariables, query: string}> {
        return requester<{data: PageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PageQueryVariables, query: string}, PageQueryVariables>(PageDocument, variables, options);
      },
    pageConnection(variables?: PageConnectionQueryVariables, options?: C): Promise<{data: PageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PageConnectionQueryVariables, query: string}> {
        return requester<{data: PageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PageConnectionQueryVariables, query: string}, PageConnectionQueryVariables>(PageConnectionDocument, variables, options);
      },
    menuItem(variables: MenuItemQueryVariables, options?: C): Promise<{data: MenuItemQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: MenuItemQueryVariables, query: string}> {
        return requester<{data: MenuItemQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: MenuItemQueryVariables, query: string}, MenuItemQueryVariables>(MenuItemDocument, variables, options);
      },
    menuItemConnection(variables?: MenuItemConnectionQueryVariables, options?: C): Promise<{data: MenuItemConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: MenuItemConnectionQueryVariables, query: string}> {
        return requester<{data: MenuItemConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: MenuItemConnectionQueryVariables, query: string}, MenuItemConnectionQueryVariables>(MenuItemConnectionDocument, variables, options);
      },
    settings(variables: SettingsQueryVariables, options?: C): Promise<{data: SettingsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SettingsQueryVariables, query: string}> {
        return requester<{data: SettingsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SettingsQueryVariables, query: string}, SettingsQueryVariables>(SettingsDocument, variables, options);
      },
    settingsConnection(variables?: SettingsConnectionQueryVariables, options?: C): Promise<{data: SettingsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SettingsConnectionQueryVariables, query: string}> {
        return requester<{data: SettingsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SettingsConnectionQueryVariables, query: string}, SettingsConnectionQueryVariables>(SettingsConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (
  client: TinaClient,
) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: {
      branch?: string,
      /**
       * Aside from `method` and `body`, all fetch options are passed
       * through to underlying fetch request
       */
      fetchOptions?: Omit<Parameters<typeof fetch>[1], 'body' | 'method'>,
    },
    client
  ) => Promise<any> = async (doc, vars, options) => {
    let url = client.apiUrl
    if (options?.branch) {
      const index = client.apiUrl.lastIndexOf('/')
      url = client.apiUrl.substring(0, index + 1) + options.branch
    }
    const data = await client.request({
      query: doc,
      variables: vars,
      url,
    }, options)

    return { data: data?.data, errors: data?.errors, query: doc, variables: vars || {} }
  }

  return requester
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(
      createClient({
        url: "http://localhost:4001/graphql",
        queries,
      })
    )
  )

export const queries = (
  client: TinaClient,
) => {
  const requester = generateRequester(client)
  return getSdk(requester)
}

  