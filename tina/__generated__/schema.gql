# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  page(relativePath: String): Page!
  pageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PageFilter): PageConnection!
  menuItem(relativePath: String): MenuItem!
  menuItemConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: MenuItemFilter): MenuItemConnection!
  settings(relativePath: String): Settings!
  settingsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: SettingsFilter): SettingsConnection!
}

input DocumentFilter {
  page: PageFilter
  menuItem: MenuItemFilter
  settings: SettingsFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Page | MenuItem | Settings | Folder

type Page implements Node & Document {
  title: String!
  description: String
  slug: String!
  published: Boolean!
  createdAt: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input PageBodyHeroFilter {
  title: StringFilter
  subtitle: StringFilter
  backgroundImage: ImageFilter
}

input PageBodyCallToActionFilter {
  text: StringFilter
  link: StringFilter
  style: StringFilter
}

input PageBodyFilter {
  Hero: PageBodyHeroFilter
  CallToAction: PageBodyCallToActionFilter
}

input PageFilter {
  title: StringFilter
  description: StringFilter
  slug: StringFilter
  published: BooleanFilter
  createdAt: DatetimeFilter
  body: PageBodyFilter
}

type PageConnectionEdges {
  cursor: String!
  node: Page
}

type PageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PageConnectionEdges]
}

type MenuItemNutritionInfo {
  calories: Float
  protein: Float
  carbs: Float
  fat: Float
}

type MenuItem implements Node & Document {
  name: String!
  description: String
  price: Float!
  category: String!
  image: String
  featured: Boolean
  available: Boolean!
  nutritionInfo: MenuItemNutritionInfo
  allergens: [String]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input NumberFilter {
  lt: Float
  lte: Float
  gte: Float
  gt: Float
  eq: Float
  exists: Boolean
  in: [Float]
}

input MenuItemNutritionInfoFilter {
  calories: NumberFilter
  protein: NumberFilter
  carbs: NumberFilter
  fat: NumberFilter
}

input MenuItemFilter {
  name: StringFilter
  description: StringFilter
  price: NumberFilter
  category: StringFilter
  image: ImageFilter
  featured: BooleanFilter
  available: BooleanFilter
  nutritionInfo: MenuItemNutritionInfoFilter
  allergens: StringFilter
}

type MenuItemConnectionEdges {
  cursor: String!
  node: MenuItem
}

type MenuItemConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [MenuItemConnectionEdges]
}

type SettingsContact {
  phone: String
  email: String
  address: String
}

type SettingsHours {
  monday: String
  tuesday: String
  wednesday: String
  thursday: String
  friday: String
  saturday: String
  sunday: String
}

type SettingsSocial {
  facebook: String
  instagram: String
  twitter: String
}

type Settings implements Node & Document {
  siteName: String!
  tagline: String
  logo: String
  description: String
  contact: SettingsContact
  hours: SettingsHours
  social: SettingsSocial
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input SettingsContactFilter {
  phone: StringFilter
  email: StringFilter
  address: StringFilter
}

input SettingsHoursFilter {
  monday: StringFilter
  tuesday: StringFilter
  wednesday: StringFilter
  thursday: StringFilter
  friday: StringFilter
  saturday: StringFilter
  sunday: StringFilter
}

input SettingsSocialFilter {
  facebook: StringFilter
  instagram: StringFilter
  twitter: StringFilter
}

input SettingsFilter {
  siteName: StringFilter
  tagline: StringFilter
  logo: ImageFilter
  description: StringFilter
  contact: SettingsContactFilter
  hours: SettingsHoursFilter
  social: SettingsSocialFilter
}

type SettingsConnectionEdges {
  cursor: String!
  node: Settings
}

type SettingsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [SettingsConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updatePage(relativePath: String!, params: PageMutation!): Page!
  createPage(relativePath: String!, params: PageMutation!): Page!
  updateMenuItem(relativePath: String!, params: MenuItemMutation!): MenuItem!
  createMenuItem(relativePath: String!, params: MenuItemMutation!): MenuItem!
  updateSettings(relativePath: String!, params: SettingsMutation!): Settings!
  createSettings(relativePath: String!, params: SettingsMutation!): Settings!
}

input DocumentUpdateMutation {
  page: PageMutation
  menuItem: MenuItemMutation
  settings: SettingsMutation
  relativePath: String
}

input DocumentMutation {
  page: PageMutation
  menuItem: MenuItemMutation
  settings: SettingsMutation
}

input PageMutation {
  title: String
  description: String
  slug: String
  published: Boolean
  createdAt: String
  body: JSON
}

input MenuItemNutritionInfoMutation {
  calories: Float
  protein: Float
  carbs: Float
  fat: Float
}

input MenuItemMutation {
  name: String
  description: String
  price: Float
  category: String
  image: String
  featured: Boolean
  available: Boolean
  nutritionInfo: MenuItemNutritionInfoMutation
  allergens: [String]
}

input SettingsContactMutation {
  phone: String
  email: String
  address: String
}

input SettingsHoursMutation {
  monday: String
  tuesday: String
  wednesday: String
  thursday: String
  friday: String
  saturday: String
  sunday: String
}

input SettingsSocialMutation {
  facebook: String
  instagram: String
  twitter: String
}

input SettingsMutation {
  siteName: String
  tagline: String
  logo: String
  description: String
  contact: SettingsContactMutation
  hours: SettingsHoursMutation
  social: SettingsSocialMutation
}

schema {
  query: Query
  mutation: Mutation
}
