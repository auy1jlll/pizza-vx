# üê≥ PRODUCTION DOCKER CONTAINER
# Optimized for deployment with minimal size and maximum security

# ============================================
# Stage 1: Dependencies Installation
# ============================================
FROM node:18-alpine AS deps
WORKDIR /app

# Install system dependencies
RUN apk add --no-cache libc6-compat openssl curl

# Copy package files
COPY package.json package-lock.json* ./
COPY prisma ./prisma/

# Install dependencies with cache optimization
RUN npm ci --only=production --frozen-lockfile && \
    npm cache clean --force && \
    npx prisma generate

# ============================================
# Stage 2: Build Application
# ============================================
FROM node:18-alpine AS builder
WORKDIR /app

# Copy dependencies from deps stage
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Build the application with temporary database URL for build process
ENV DATABASE_URL="postgresql://dummy:dummy@localhost:5432/dummy"
RUN npx prisma generate && \
    npm run build

# ============================================
# Stage 3: Production Runtime
# ============================================
FROM node:18-alpine AS runner
WORKDIR /app

# Create system user for security
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# Install only runtime dependencies
RUN apk add --no-cache curl dumb-init && \
    rm -rf /var/cache/apk/*

# Set environment
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV PORT=3000

# Copy built application
COPY --from=builder /app/public ./public
COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./.next/static
COPY --from=builder /app/prisma ./prisma

# Copy Prisma client from deps stage
COPY --from=deps /app/node_modules/.prisma ./.prisma
COPY --from=deps /app/node_modules/@prisma ./node_modules/@prisma

# Set ownership
RUN chown -R nextjs:nodejs /app

# Switch to non-root user
USER nextjs

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD curl -f http://localhost:3000/api/health || exit 1

# Expose port
EXPOSE 3000

# Start application with proper process management
CMD ["dumb-init", "node", "server.js"]
