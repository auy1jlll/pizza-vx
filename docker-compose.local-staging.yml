# üöÄ FAST STAGING WITH PROPER DATA
# Quick deployment with real schema and data

version: '3.8'

services:
  # ============================================
  # PostgreSQL Database - STAGING WITH REAL DATA
  # ============================================
  postgres-staging:
    image: postgres:16-alpine
    container_name: pizza-postgres-staging
    restart: unless-stopped
    environment:
      POSTGRES_DB: pizzax
      POSTGRES_USER: auy1jll66
      POSTGRES_PASSWORD: "_Zx-nake_6172"
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5433:5432"  # Different port to avoid conflicts
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
      - ./backups:/backups:ro
    networks:
      - pizza-staging-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pizzauser -d pizzadb_staging"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    command: |
      postgres -c log_statement=all 
      -c log_destination=stderr 
      -c logging_collector=on
      -c max_connections=100
      -c shared_buffers=256MB

  # ============================================
  # Pizza App - LOCAL STAGING
  # ============================================
  pizza-app-staging:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: pizza-app-staging
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://pizzauser:pizzapass123!@postgres-staging:5432/pizzadb_staging?schema=public
      NEXTAUTH_SECRET: staging-secret-key-for-local-testing
      NEXTAUTH_URL: http://localhost:3001
      PORT: 3000
      # Email settings (optional for staging)
      GMAIL_USER: ${GMAIL_USER:-""}
      GMAIL_APP_PASSWORD: ${GMAIL_APP_PASSWORD:-""}
    ports:
      - "3001:3000"  # Staging runs on port 3001
    depends_on:
      postgres-staging:
        condition: service_healthy
    networks:
      - pizza-staging-network
    volumes:
      - ./prisma:/app/prisma:ro
      - ./backups:/app/backups:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health || http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: |
      sh -c "
        echo 'üöÄ Starting Pizza App Staging Environment...'
        echo 'üìä Database URL: postgresql://pizzauser:***@postgres-staging:5432/pizzadb_staging'
        echo 'üåê App URL: http://localhost:3001'
        echo 'üîß Running database migrations...'
        npx prisma migrate deploy || echo 'Migration failed, continuing...'
        echo 'üîß Generating Prisma client...'
        npx prisma generate || echo 'Prisma generate failed, continuing...'
        echo 'üçï Starting Next.js application...'
        npm start
      "

  # ============================================
  # Database Management (optional)
  # ============================================
  adminer:
    image: adminer:4.8.1
    container_name: pizza-adminer-staging
    restart: unless-stopped
    ports:
      - "8080:8080"
    networks:
      - pizza-staging-network
    environment:
      ADMINER_DEFAULT_SERVER: postgres-staging
      ADMINER_DESIGN: dracula
    depends_on:
      - postgres-staging

networks:
  pizza-staging-network:
    driver: bridge
    name: pizza-staging-network

volumes:
  postgres_staging_data:
    name: pizza-staging-data
